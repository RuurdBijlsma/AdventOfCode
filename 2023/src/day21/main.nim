import std/strutils
import std/strformat
import std/tables
import std/sequtils
import std/math
import std/sugar
import std/algorithm
import std/sets

type Point = (tuple[x, y: int])
type Grid = seq[string]
func width(g: Grid): int = g[0].len
func height(g: Grid): int = g.len
func `[]`(g: Grid, p: Point): char = 
  let w = g.width
  let h = g.height
  let y = if p.y >= 0: p.y mod h else: (h - (-p.y mod h)) mod h
  let x = if p.x >= 0: p.x mod w else: (w - (-p.x mod w)) mod w
  g[y][x]

func neighbours(grid: Grid, p: Point): seq[Point] =
  return @[
    (x: p.x - 1, y: p.y), # Left
    (x: p.x + 1, y: p.y), # Right
    (x: p.x, y: p.y + 1), # Down
    (x: p.x, y: p.y - 1), # Up
  ]

proc printGridQueue(grid: Grid, queue: seq[(Point, int)]) =
  for y in 0 ..< grid.height:
    for x in 0 ..< grid.width:
      let f = queue.filterIt(it[0] == (x: x, y: y))
      if f.len > 0:
        stdout.write(($f[0][1]).alignLeft(2))
      else: stdout.write(grid[y][x] & ' ')
    stdout.write("\n")

func getCycleResults(input: static string, maxSteps = 250): seq[int] =
  const grid = input.splitLines()
  const start: Point = (input.find("S") mod (grid.width + 1), input.find("S") div (grid.width + 1))
  
  var queue = @[(start, 0)]
  var visited = initHashSet[(Point, int)]()
  result = newSeq[int]()

  while queue.len > 0:
    let (position, steps) = queue.pop()
    if steps > maxSteps: break

    if result.len == steps:
      result.add(0)
    result[steps] += 1

    for n in grid.neighbours(position):
      if grid[n] == '#':
        continue
      let nextItem = (n, steps + 1)
      if visited.contains(nextItem): continue
      visited.incl(nextItem)
      queue.insert(nextItem, 0)

proc part1*(): int =
  getCycleResults(staticRead("input"), 64)[64]

proc part2*(): int =
  const input = staticRead("input")
  const repeat = input.splitLines.len

  let results = getCycleResults(input, 500)

  # test results:
  # const results = @[1, 2, 4, 6, 9, 13, 16, 22, 30, 41, 50, 63, 74, 89, 99, 115, 129, 145, 165, 192, 216, 234, 261, 294, 326, 353, 395, 427, 460, 491, 537, 574, 605, 644, 689, 740, 784, 846, 894, 944, 989, 1053, 1107, 1146, 1196, 1256, 1324, 1383, 1464, 1528, 1594, 1653, 1735, 1805, 1853, 1914, 1988, 2072, 2145, 2244, 2324, 2406, 2479, 2579, 2665, 2722, 2794, 2882, 2982, 3069, 3186, 3282, 3380, 3467, 3585, 3687, 3753, 3836, 3938, 4054, 4155, 4290, 4402, 4516, 4617, 4753, 4871, 4946, 5040, 5156, 5288, 5403, 5556, 5684, 5814, 5929, 6083, 6217, 6301, 6406, 6536, 6684, 6813, 6984, 7128, 7274, 7403, 7575, 7725, 7818, 7934, 8078, 8242, 8385, 8574, 8734, 8896, 9039, 9229, 9395, 9497, 9624, 9782, 9962, 10119, 10326, 10502, 10680, 10837, 11045, 11227, 11338, 11476, 11648, 11844, 12015, 12240, 12432, 12626, 12797, 13023, 13221, 13341, 13490, 13676, 13888, 14073, 14316, 14524, 14734, 14919, 15163, 15377, 15506, 15666, 15866, 16094, 16293, 16554, 16778, 17004, 17203, 17465, 17695, 17833, 18004, 18218, 18462, 18675, 18954, 19194, 19436, 19649, 19929, 20175, 20322, 20504, 20732, 20992, 21219, 21516, 21772, 22030, 22257, 22555, 22817, 22973, 23166, 23408, 23684, 23925, 24240, 24512, 24786, 25027, 25343, 25621, 25786, 25990, 26246, 26538, 26793, 27126, 27414, 27704, 27959, 28293, 28587, 28761, 28976, 29246, 29554, 29823, 30174, 30478, 30784, 31053, 31405, 31715, 31898, 32124, 32408, 32732, 33015, 33384, 33704, 34026, 34309, 34679, 35005, 35197, 35434, 35732, 36072, 36369, 36756, 37092, 37430, 37727, 38115, 38457, 38658, 38906, 39218, 39574, 39885, 40290, 40642, 40996, 41307, 41713]
  
  # input results:
  # const results = @[1, 4, 9, 15, 23, 33, 47, 57, 77, 86, 114, 127, 161, 177, 215, 233, 269, 293, 332, 362, 403, 437, 482, 522, 570, 613, 665, 708, 759, 810, 866, 926, 984, 1048, 1111, 1176, 1241, 1309, 1372, 1442, 1521, 1591, 1675, 1748, 1836, 1904, 1992, 2067, 2166, 2239, 2340, 2414, 2527, 2601, 2720, 2799, 2920, 2999, 3139, 3205, 3348, 3423, 3596, 3681, 3858, 3943, 4122, 4211, 4394, 4461, 4638, 4723, 4896, 4988, 5174, 5270, 5444, 5552, 5723, 5837, 6019, 6134, 6316, 6430, 6624, 6740, 6926, 7053, 7251, 7382, 7574, 7715, 7905, 8049, 8242, 8383, 8590, 8733, 8934, 9080, 9288, 9442, 9649, 9811, 10018, 10199, 10405, 10587, 10798, 10973, 11188, 11365, 11599, 11778, 11995, 12182, 12413, 12606, 12830, 13030, 13269, 13481, 13704, 13927, 14157, 14380, 14628, 14849, 15082, 15304, 15537, 15779, 16013, 16254, 16480, 16746, 16988, 17255, 17499, 17761, 17989, 18278, 18509, 18801, 19025, 19329, 19554, 19847, 20073, 20385, 20613, 20916, 21155, 21453, 21718, 22023, 22291, 22597, 22851, 23156, 23414, 23731, 24004, 24319, 24592, 24919, 25193, 25519, 25801, 26120, 26396, 26750, 27022, 27386, 27661, 28027, 28275, 28642, 28908, 29291, 29550, 29931, 30192, 30593, 30853, 31261, 31515, 31939, 32195, 32646, 32868, 33330, 33550, 34074, 34337, 34871, 35126, 35659, 35918, 36455, 36666, 37163, 37397, 37882, 38141, 38636, 38905, 39377, 39666, 40124, 40422, 40892, 41189, 41651, 41952, 42438, 42739, 43197, 43524, 44007, 44336, 44802, 45154, 45598, 45952, 46402, 46752, 47227, 47579, 48037, 48389, 48859, 49218, 49685, 50054, 50517, 50923, 51384, 51789, 52255, 52640, 53110, 53496, 54000, 54384, 54853, 55246, 55744, 56149, 56630, 57043, 57549, 57982, 58448, 58904, 59379, 59833, 60338, 60787, 61258, 61705, 62172, 62655, 63120, 63597, 64043, 64567, 65041, 65561, 66039, 66543, 66990, 67540, 67989, 68539, 68971, 69541, 69973, 70523, 70951, 71536, 71962, 72527, 72971, 73522, 74012, 74574, 75067, 75627, 76092, 76651, 77116, 77694, 78180, 78752, 79234, 79825, 80308, 80895, 81391, 81966, 82448, 83077, 83551, 84195, 84672, 85316, 85744, 86390, 86847, 87514, 87959, 88620, 89068, 89757, 90203, 90900, 91329, 92056, 92489, 93251, 93629, 94410, 94775, 95650, 96091, 96982, 97407, 98294, 98723, 99614, 99969, 100786, 101169, 101966, 102392, 103196, 103638, 104408, 104878, 105623, 106105, 106863, 107342, 108084, 108572, 109350, 109836, 110566, 111093, 111861, 112388, 113128, 113691, 114389, 114953, 115660, 116219, 116962, 117523, 118238, 118796, 119528, 120092, 120819, 121395, 122114, 122745, 123461, 124089, 124810, 125405, 126130, 126725, 127499, 128088, 128809, 129408, 130173, 130790, 131528, 132154, 132927, 133581, 134290, 134979, 135699, 136384, 137146, 137823, 138532, 139204, 139905, 140629, 141325, 142038, 142704, 143486, 144192, 144965, 145677, 146423, 147089, 147900, 148567, 149375, 150015, 150851, 151490, 152297, 152927, 153785, 154409, 155236, 155885, 156689, 157404, 158223, 158941, 159755, 160431, 161244, 161916, 162755, 163454, 164283, 164974, 165829, 166521, 167369, 168079, 168910, 169598, 170502, 171178, 172102, 172781, 173703, 174311, 175236, 175884, 176835, 177466, 178407, 179042, 180019, 180651, 181637, 182241, 183271, 183881, 184954, 185488, 186588, 187098, 188324, 188943, 190191, 190786, 192027, 192626, 193871, 194370, 195507, 196039, 197148, 197741, 198854, 199469, 200537, 201188, 202220, 202886, 203932, 204593, 205615, 206290, 207360, 208031, 209033, 209760, 210813, 211538, 212552, 213326, 214278, 215052, 216016, 216784, 217795, 218565, 219537, 220301, 221295, 222064, 223051, 223834, 224809, 225665, 226636, 227487]
  
  # const steps = 5000
  const steps = 26501365
  var lastStepWithSameMod = (results.len div repeat) * repeat + (steps mod repeat)
  if lastStepWithSameMod >= results.len: lastStepWithSameMod -= repeat
  let diff1 = results[lastStepWithSameMod - repeat] - results[lastStepWithSameMod - repeat * 2]
  let diff2 = results[lastStepWithSameMod] - results[lastStepWithSameMod - repeat]
  let level2diff = diff2 - diff1
  let extraSteps = steps - lastStepWithSameMod

  result = results[lastStepWithSameMod]
  var difference = diff2
  for _ in 1 .. extraSteps div repeat:
    difference += level2diff
    result += difference
